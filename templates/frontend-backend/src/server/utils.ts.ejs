import { RequestHandler } from "express";
import { validationResult } from "express-validator";

// Checks the req object for inserted validation errors. If any are found,
// the request is halted and a 400 is returned with the list of errors found
export const validateRequest: RequestHandler = (req, res, next) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(400).send(
            errors
                .array()
                .map(err => err.msg)
                .join(". ")
        );
    }

    return next();
};

// Creates a middleware which extends the request timeout by the specified time
export const extendTimeout = (seconds: number): RequestHandler => (req, res, next) => {
    req.setTimeout(seconds * 1000);
    return next();
};

// A middleware which simulates network lag in development mode
export const simulateNetworkLag: RequestHandler = (req, res, next) => {
    const MAX_LAG = 0;
    if (process.env.NODE_ENV !== "development" || MAX_LAG === 0) return next();
    setTimeout(next, Math.random() * MAX_LAG);
};

// TODO: Export additional utility functions
